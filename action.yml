name: Terraform Plan
description: Validate and Plan terraform configurations

inputs:
  plan-flags:
    description: Extra flags for Terraform Plan
    required: false
  init:
    description: Toggle to run init
    required: false
    default: 'true'
  init-flags:
    description: Extra flags for Terraform Init
    required: false
  apply:
    description: Toggle to run apply
    required: false
    default: 'false'
  apply-flags:
    description: Extra flags for Terraform Apply
    required: false
  working-directory:
    description: The directory where the terraform files are located
    required: false
  github-token:
    description: GitHub token used to create comment in PR
    required: false
    default: ${{ github.token }}

outputs:
  exit-code:
    description: Plan exit code
    value: ${{ steps.plan.outputs.exitcode }}
  plan-file:
    description: Path to plan file
    value: ${{ inputs.working-directory }}/tfplan

runs:
  using: composite

  steps:
    - name: Check format
      id: format
      shell: bash
      run: terraform fmt -recursive -check

    - name: Cache Providers
      id: cache
      uses: actions/cache@v4
      with:
        key: terraform-plan-${{ github.workflow }}-${{ hashFiles(format('{0}/.terraform.lock.hcl', inputs.working-directory)) }}
        path: ${{ inputs.working-directory }}/.terraform/providers

    - name: Init
      id: init
      if: fromJSON(inputs.init)
      working-directory: ${{ inputs.working-directory }}
      env:
        TF_IN_AUTOMATION: "1"
        TF_INPUT: "0"
      shell: bash
      run: |
        echo ::group::Init
        terraform init ${{ inputs.init-flags }}
        echo ::endgroup::

    - name: Validate
      id: validate
      working-directory: ${{ inputs.working-directory }}
      env:
        TF_IN_AUTOMATION: "1"
      shell: bash
      run: |
        echo ::group::Validate
        terraform validate
        echo ::endgroup::

    - name: Cache Plan file
      id: cache
      uses: actions/cache@v4
      with:
        key: terraform-plan-${{ github.run_id }}-${{ github.run_attempt }}
        path: ${{ inputs.working-directory }}/tfplan

    - name: Plan
      id: plan
      working-directory: ${{ inputs.working-directory }}
      if: steps.cache.outputs.cache-hit == 'false'
      env:
        TF_IN_AUTOMATION: "1"
        TF_INPUT: "0"
      shell: bash
      run: |
        echo ::group::Plan
        terraform plan -detailed-exitcode -out=tfplan ${{ inputs.plan-flags }}
        echo ::endgroup::

    - name: Apply
      working-directory: ${{ inputs.working-directory }}
      if: fromJSON(inputs.apply) && steps.plan.outputs.exitcode != '0'
      env:
        TF_IN_AUTOMATION: "1"
        TF_INPUT: "0"
      shell: bash
      run: |
        echo ::group::Apply
        terraform apply ${{ inputs.apply-flags }} tfplan
        echo ::endgroup::

    - name: Comment in PR
      if: ${{ !cancelled() && github.event_name == 'pull_request' }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          let plan = ''
          if ('${{ steps.plan.outcome }}' === 'success') {
            await exec.exec('terraform show', ['-no-color', tfplan], {
              cwd: '${{ inputs.working-directory }}',
              silent: true,
              env: {
                TF_IN_AUTOMATION: '1'
              },
              listeners: {
                stdout: (data: Buffer) => {
                  plan += data.toString()
                }
              }
            })
          }
          
          
          // 1. Prepare the format of the comment
          const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
            attempt_number: process.env.GITHUB_RUN_ATTEMPT
          })
          
          const output = `#### Format üñå\`${{ steps.format.outcome }}\`
          #### Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Plan üìñ\`${{ steps.plan.outcome }}\`
          
          ${plan.trim() !== '' ? `<details><summary>Show Plan</summary>
          \`\`\`diff
          ${plan.trim()}
          \`\`\`
          </details>` : ''}
          
          **Pusher**: *@${context.actor}* &nbsp; **Commit**: *\`${context.payload.pull_request.head.sha.substring(0, 7)}\`* &nbsp; **Workflow run**: *[${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/attempts/${process.env.GITHUB_RUN_ATTEMPT})* &nbsp; **Workflow job**: *[${context.job}](${jobs.jobs.filter(job => job.name == context.job)[0].html_url})*`
          
          
          // 2. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Format')
          })
          
          
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
